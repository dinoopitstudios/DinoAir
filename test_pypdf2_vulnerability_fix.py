#!/usr/bin/env python3
"""
Test script to verify the PyPDF2 infinite loop vulnerability fix.

This script tests the enhanced SafePDFProcessor against various malformed PDF
scenarios that could trigger the infinite loop vulnerability in PyPDF2.
"""

from pathlib import Path
import tempfile
import time

from utils.safe_pdf_extractor import PDFProcessingError, SafePDFProcessor


def create_malformed_pdf_content(variant: str) -> bytes:
    """Create different variants of malformed PDF content for testing."""

    if variant == "comment_at_eof":
        # PDF ending with malformed comment (main vulnerability)
        return b"%PDF-1.4\nsome content\n%"

    if variant == "comment_no_newline":
        # Comment without proper newline termination
        return b"%PDF-1.4\nsome content\n%\nmore content"

    if variant == "comment_with_null":
        # Comment followed by null byte
        return b"%PDF-1.4\nsome content\n%\x00\nmore content"

    if variant == "multiple_malformed_comments":
        # Multiple malformed comments
        return b"%PDF-1.4\n%\nsome content\n%\nmore content\n%"

    if variant == "normal_comment":
        # Normal PDF with proper comments (should work fine)
        return b"%PDF-1.4\n% This is a normal comment\nsome content"

    raise ValueError(f"Unknown variant: {variant}")


def test_preprocessing_fix():
    """Test that PDF content preprocessing fixes malformed comments."""

    processor = SafePDFProcessor(timeout=5)  # Short timeout for testing

    # Test various malformed content scenarios
    test_cases = [
        "comment_at_eof",
        "comment_no_newline",
        "comment_with_null",
        "multiple_malformed_comments",
        "normal_comment",
    ]

    for case in test_cases:
        # Create malformed content
        malformed_content = create_malformed_pdf_content(case)

        # Test preprocessing
        sanitized_content = processor._preprocess_pdf_content(malformed_content)

        # Verify that malformed comments are fixed
        content_str = sanitized_content.decode("latin-1", errors="ignore")

        # Should not have bare '%' characters anymore
        lines = content_str.split("\n")
        for line in lines:
            if line.strip() == "%":
                return False

    return True


def test_safe_pdf_processing():
    """Test safe PDF processing with timeout protection."""

    processor = SafePDFProcessor(timeout=2)  # Very short timeout for testing

    test_cases = [
        ("comment_at_eof", "Malformed comment at end of file"),
        ("comment_no_newline", "Comment without proper newline"),
        ("multiple_malformed_comments", "Multiple malformed comments"),
    ]

    for case, _description in test_cases:
        # Create test PDF file
        malformed_content = create_malformed_pdf_content(case)

        with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as temp_file:
            temp_file.write(malformed_content)
            temp_file.flush()

            try:
                start_time = time.time()

                # This should not hang due to our protections
                try:
                    processor._safe_read_pdf(temp_file.name)
                    processing_time = time.time() - start_time

                except PDFProcessingError:
                    processing_time = time.time() - start_time

                except Exception:
                    processing_time = time.time() - start_time

                # Ensure processing didn't take too long (no infinite loop)
                if processing_time > 3.0:  # Should complete within timeout + overhead
                    return False

            finally:
                Path(temp_file.name).unlink()

    return True


def test_vulnerability_scenario():
    """Test the specific PyPDF2 vulnerability scenario."""

    # This is the specific content pattern that triggers the vulnerability
    vulnerable_content = b"""%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Count 1
/Kids [3 0 R]
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/Resources <<
  /Font <<
    /F1 <<
      /Type /Font
      /Subtype /Type1
      /BaseFont /Helvetica
    >>
  >>
>>
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
72 720 Td
(Hello World) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f
0000000009 00000 n
0000000074 00000 n
0000000120 00000 n
0000000435 00000 n
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
%"""  # NOTE: This PDF content intentionally ends with a bare '%' character to trigger the infinite loop vulnerability. This malformed ending is deliberate for vulnerability testing.

    processor = SafePDFProcessor(timeout=3)

    with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as temp_file:
        temp_file.write(vulnerable_content)
        temp_file.flush()

        try:
            start_time = time.time()

            # Test that our preprocessing + timeout protects against the vulnerability
            try:
                processor._safe_read_pdf(temp_file.name)
                processing_time = time.time() - start_time

            except Exception:
                processing_time = time.time() - start_time

            # Ensure no infinite loop occurred
            if processing_time > 5.0:
                return False

        finally:
            Path(temp_file.name).unlink()

    return True


def main():
    """Run all vulnerability tests."""

    tests = [test_preprocessing_fix, test_safe_pdf_processing, test_vulnerability_scenario]

    passed = 0
    total = len(tests)

    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                pass
        except Exception:
            pass

    if passed == total:
        pass
    else:
        pass

    return passed == total


if __name__ == "__main__":
    import sys

    sys.exit(0 if main() else 1)
