[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dinoair"
version = "2.0.0"
description = "DinoAir 2.0 - Advanced AI-powered note-taking and project management system"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Dinopitstudios", email = "contact@dinopitstudios.com"}
]
keywords = [
    "ai", "notes", "project-management", "rag", "productivity",
    "semantic-search", "knowledge-management"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Text Processing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Runtime dependencies with pinned versions for stability
dependencies = [
    # Core runtime dependencies - stdlib modules don't need explicit pinning
    # sqlite3 is part of Python stdlib, no separate dependency needed

    # Async file operations
    "aiofiles>=23.2.0,<25.0.0",

    # Cryptography for encryption-at-rest
    "cryptography>=41.0.0,<45.0.0",

    # HTTP client for API calls
    "httpx>=0.25.0,<0.29.0",

    # PDF processing
    "pypdf>=6.0.0,<7.0.0",

    # System monitoring
    "psutil>=5.9.0,<8.0.0",

    # Fast JSON handling (optional performance enhancement)
    "orjson>=3.9.0,<4.0.0",

    # Configuration management
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",

    # Async utilities
    "anyio>=4.0.0,<5.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing framework
    "pytest>=7.4.0,<9.0.0",
    "pytest-cov>=4.1.0,<8.0.0",
    "pytest-timeout>=2.2.0,<3.0.0",
    "pytest-asyncio>=0.21.0,<2.0.0",
    "pytest-mock>=3.12.0,<4.0.0",

    # Code quality
    "ruff>=0.1.7,<1.0.0",
    "black>=23.11.0,<25.0.0",
    "isort>=5.12.0,<7.0.0",

    # Type checking
    "mypy>=1.7.0,<2.0.0",
    "types-aiofiles>=23.2.0,<25.0.0",
    "types-psutil>=5.9.0,<6.0.0",
    "types-requests>=2.31.0,<3.0.0",

    # Documentation
    "sphinx>=7.2.0,<9.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
    "sphinx-autodoc-typehints>=1.25.0,<4.0.0",
    "myst-parser>=2.0.0,<5.0.0",

    # Security scanning
    "bandit>=1.7.5,<2.0.0",
    "safety>=2.3.0,<4.0.0",

    # Performance profiling
    "py-spy>=0.3.14,<1.0.0",
    "memory-profiler>=0.61.0,<1.0.0",
]

# AI/ML optional dependencies for advanced features
ai = [
    "transformers>=4.35.0,<5.0.0",
    "torch>=2.1.0,<3.0.0",
    "sentence-transformers>=2.2.0,<6.0.0",
    "numpy>=1.24.0,<2.0.0",
    "scikit-learn>=1.3.0,<2.0.0",
]

# Web interface dependencies
web = [
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    "jinja2>=3.1.0,<4.0.0",
    "python-multipart>=0.0.6,<1.0.0",
]

# Database extensions
database = [
    "sqlalchemy>=2.0.0,<3.0.0",
    "alembic>=1.13.0,<2.0.0",
    "asyncpg>=0.29.0,<1.0.0",  # PostgreSQL async driver
]

# All optional dependencies
all = [
    "dinoair[dev,ai,web,database]"
]

# Test-only dependencies (for CI and local testing)
tests = [
    "pytest>=7.4.0,<9.0.0",
    "pytest-cov>=4.1.0,<8.0.0",
    "pytest-timeout>=2.2.0,<3.0.0",
    "pytest-asyncio>=0.21.0,<2.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/Dinopitstudios/DinoAir"
Documentation = "https://dinopitstudios.github.io/DinoAir/"
Repository = "https://github.com/Dinopitstudios/DinoAir"
Issues = "https://github.com/Dinopitstudios/DinoAir/issues"
Changelog = "https://github.com/Dinopitstudios/DinoAir/blob/main/CHANGELOG.md"

[project.scripts]
dinoair = "main:main"
dinoair-cli = "cli:main"

# If you want to expose a CLI for project management, add more here

[project.gui-scripts]
dinoair-gui = "gui.main:main"

# If you want to expose a GUI entry point, add more here

# Tool configurations
[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "*.tests*", "*.tests"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.toml", "*.md", "*.txt"]

# Ruff configuration (replaces flake8, isort, and some pylint)
[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "COM", # flake8-commas
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "ERA", # eradicate
    "N",   # pep8-naming
]
ignore = [
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "COM812",  # Missing trailing comma (conflicts with formatter)
    "E501",    # Line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T20", "ARG", "PLR2004"]  # Allow prints and magic values in tests
"docs/*" = ["T20", "ARG"]
"scripts/*" = ["T20"]

[tool.ruff.lint.isort]
# Import organization configuration for DinoAir
known-first-party = [
    "dinoair",
    "config",
    "database",
    "models",
    "utils",
    "scripts"
]
known-third-party = [
    "aiofiles",
    "cryptography",
    "httpx",
    "pypdf",
    "psutil",
    "orjson",
    "pydantic",
    "anyio",
    "pytest",
    "mypy",
    "ruff",
    "black",
    "isort"
]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]
force-single-line = false
force-sort-within-sections = true
combine-as-imports = true
lines-after-imports = 2
lines-between-types = 1
forced-separate = ["tests"]
no-lines-before = ["local-folder"]
order-by-type = true
split-on-trailing-comma = true

# Black code formatter configuration
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy type checking configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

# Per-module overrides
[[tool.mypy.overrides]]
module = [
    "pypdf.*",
    "transformers.*",
    "torch.*",
    "sentence_transformers.*",
    "sklearn.*",
    "py_spy.*",
    "memory_profiler.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
warn_return_any = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-config",
    "--strict-markers",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--timeout=300",
    "--tb=short",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests that require AI models",
    "web: marks tests that require web dependencies",
    "database: marks tests that require database",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "docs/*",
    "scripts/*",
    "*/site-packages/*",
    "*/.venv/*",
    "*/venv/*",
    "setup.py",
    "conftest.py",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

# Safety vulnerability scanning
[tool.safety]
# Configuration for safety (vulnerability scanning)
full_report = true
output = "json"
