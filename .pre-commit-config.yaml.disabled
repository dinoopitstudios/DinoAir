# Pre-commit hooks configuration for DinoAir Import Organization
# This enforces import standards and code quality before commits

repos:
  # First, let's start with basic file checks that don't depend on Python tools
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=500']
      - id: check-case-conflict
        name: Check for case conflicts
      - id: mixed-line-ending
        name: Normalize line endings
        args: ['--fix=lf']

  # Code formatting with Black (uses settings from pyproject.toml)
  - repo: https://github.com/psf/black
    rev: 24.3.0
    hooks:
      - id: black
        language_version: python3.11

  # Import sorting with isort via Ruff (uses settings from pyproject.toml)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.13.0
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format

  # Type checking with MyPy (uses settings from pyproject.toml)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.18.1
    hooks:
      - id: mypy
        additional_dependencies: [types-aiofiles, types-psutil, types-requests]
        args: [--ignore-missing-imports]
        exclude: ^(tests/|.*test.*\.py$|04_core_router/|05_api/|06_rag/|07_tools/|08_input_processing/|09_monitoring/|10_src/|11_GUI/|models\.py$)

  # Security scanning with Bandit (uses settings from pyproject.toml)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args: [--configfile, pyproject.toml]
        exclude: ^tests/

  # Testing with pytest (lightweight check)
  - repo: local
    hooks:
      - id: pytest-check
        name: pytest quick check
        entry: python -m pytest --collect-only -q
        language: system
        pass_filenames: false
        always_run: true

  # Documentation and Configuration Validation
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-no-eval
        name: Prohibit eval() usage
        exclude: |
          (?x)^(
            07_tools/pseudocode_translator/models/local_transformer_model\.py|
            07_tools/pseudocode_translator/tests/test_validator_basics\.py|
            utils/tests/test_safe_expr\.py|
            utils/safe_expr\.py
          )$
      - id: python-check-blanket-noqa
        name: Check blanket noqa
      - id: rst-backticks
        name: Check RST backticks
        files: \.rst$
      - id: rst-directive-colons
        name: Check RST directive colons
        files: \.rst$

  # Dependency safety scan
  - repo: local
    hooks:
      - id: safety-scan
        name: Safety vulnerability scan
        entry: safety scan --target .
        language: system
        pass_filenames: false
        stages: [pre-commit]

# Configuration for specific file types and directories
default_language_version:
  python: python3.11
  node: "20.17.0"

# Exclude patterns for all hooks
exclude: |
  (?x)^(
    \.git/.*|
    \.mypy_cache/.*|
    \.pytest_cache/.*|
    __pycache__/.*|
    \.venv/.*|
    venv/.*|
    build/.*|
    dist/.*|
    \.tox/.*|
    htmlcov/.*|
    \.coverage.*
  )$

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: 'main'
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [circular-dependency-check]  # Skip custom local hooks in CI
