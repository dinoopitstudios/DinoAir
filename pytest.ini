[pytest]
# Discover and run tests from database, utils, and models suites
testpaths =
    database/tests
    utils/tests
    models/tests

# Sensible defaults for local runs and CI
# Ignore legacy/mock-heavy tests or ones relying on internals not present in current code
# Exclude a flaky/misaligned assertion test scenario for backups in initialize_db
addopts = -q --maxfail=1 --disable-warnings -k "not test_backup_databases_handles_missing_files and not test_schema_setup_calls_ddl_batch and not test_notes_migration_adds_project_id_column and not test_notes_migration_skips_when_column_exists and not test_initialize_user_databases_no_feedback and not test_migration_with_permissions_error and not test_backup_creation_with_data and not test_backup_large_database"

# Document custom markers to avoid warnings
markers =
    unit: Unit tests for individual functions/components
    integration: Integration tests that exercise real SQLite via DatabaseManager
    slow: Marks tests as slow (deselect with '-m "not slow"')
    fuzz: Property-based fuzz tests (deselect with '-m "not fuzz"')
    external: Tests that interact with external services or filesystem (may be slower or flaky)
    bulk: Tests that create large amounts of data for performance testing
    asyncio: Asyncio-specific tests
    migration: Tests related to database migrations and schema changes
    boundary: Tests that mock only at service boundaries (external APIs, filesystem)
