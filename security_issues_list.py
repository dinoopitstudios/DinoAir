# GitHub Security Issues - Generated Python List
# Generated on: 2025-09-19T17:21:13.097419
# Total issues: 30

security_issues = [
    {
        "id": 346,
        "type": "code_scanning",
        "severity": "error",
        "rule_id": "py/unreachable-except",
        "rule_name": "py/unreachable-except",
        "title": "Unreachable 'except' block",
        "state": "open",
        "file_path": "utils/network_security.py",
        "line_start": 357,
        "line_end": 357,
        "column_start": 9,
        "column_end": 31,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/346",
        "created_at": "2025-09-19T20:33:00Z",
        "updated_at": "2025-09-19T20:33:08Z",
        "tags": ["error-handling", "external/cwe/cwe-561", "quality", "reliability"],
        "help_text": '# Unreachable \'except\' block\nWhen handling an exception, Python searches the except blocks in source code order until it finds a matching `except` block for the exception. An except block, `except E:`, specifies a class `E` and will match any exception that is an instance of `E`.\n\nIf a more general except block precedes a more specific except block, then the more general block is always executed and the more specific block is never executed. An except block, `except A:`, is more general than another except block, `except B:`, if `A` is a super class of `B`.\n\nFor example: `except Exception:` is more general than `except Error:` as `Exception` is a super class of `Error`.\n\n\n## Recommendation\nReorganize the `except` blocks so that the more specific `except` is defined first. Alternatively, if the more specific `except` block is no longer required then it should be deleted.\n\n\n## Example\nIn this example the `except Exception:` will handle `AttributeError` preventing the subsequent handler from ever executing.\n\n\n```python\n\n\ndef incorrect_except_order(val):\n    try:\n        val.attr\n    except Exception:\n        print ("Exception")\n    except AttributeError:\n        print ("AttributeError")\n        \n\n```\n\n## References\n* Python Language Reference: [The try statement](http://docs.python.org/2.7/reference/compound_stmts.html#try), [Exceptions](http://docs.python.org/2.7/reference/executionmodel.html#exceptions).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n',
    },
    {
        "id": 318,
        "type": "code_scanning",
        "severity": "warning",
        "rule_id": "py/multiple-definition",
        "rule_name": "py/multiple-definition",
        "title": "Variable defined multiple times",
        "state": "open",
        "file_path": "tools/pseudocode_translator/streaming/stream_translator.py",
        "line_start": 274,
        "line_end": 274,
        "column_start": 15,
        "column_end": 45,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/318",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": "# Variable defined multiple times\nMultiple assignments to a single variable without an intervening usage makes the first assignment redundant. Its value is lost.\n\n\n## Recommendation\nEnsure that the second assignment is in fact correct. Then delete the first assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, `x` is assigned the value of 42 but then the value is changed to 12 before `x` is used. This makes the first assignment useless.\n\n\n```python\nx = 42\nx = 12\nprint x\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n",
    },
    {
        "id": 317,
        "type": "code_scanning",
        "severity": "warning",
        "rule_id": "py/multiple-definition",
        "rule_name": "py/multiple-definition",
        "title": "Variable defined multiple times",
        "state": "open",
        "file_path": "tools/pseudocode_translator/streaming/stream_translator.py",
        "line_start": 270,
        "line_end": 270,
        "column_start": 15,
        "column_end": 46,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/317",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": "# Variable defined multiple times\nMultiple assignments to a single variable without an intervening usage makes the first assignment redundant. Its value is lost.\n\n\n## Recommendation\nEnsure that the second assignment is in fact correct. Then delete the first assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, `x` is assigned the value of 42 but then the value is changed to 12 before `x` is used. This makes the first assignment useless.\n\n\n```python\nx = 42\nx = 12\nprint x\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n",
    },
    {
        "id": 335,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "manual_docstring_generator.py",
        "line_start": 255,
        "line_end": 255,
        "column_start": 17,
        "column_end": 32,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/335",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 334,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "utils/logging_examples.py",
        "line_start": 344,
        "line_end": 344,
        "column_start": 5,
        "column_end": 14,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/334",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 333,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "utils/logging_examples.py",
        "line_start": 322,
        "line_end": 322,
        "column_start": 9,
        "column_end": 16,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/333",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 332,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "input_processing/input_sanitizer.py",
        "line_start": 216,
        "line_end": 216,
        "column_start": 13,
        "column_end": 16,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/332",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 331,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "input_processing/input_sanitizer.py",
        "line_start": 211,
        "line_end": 211,
        "column_start": 13,
        "column_end": 22,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/331",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 330,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "input_processing/input_sanitizer.py",
        "line_start": 198,
        "line_end": 198,
        "column_start": 13,
        "column_end": 28,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/330",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 329,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "input_processing/input_sanitizer.py",
        "line_start": 192,
        "line_end": 192,
        "column_start": 13,
        "column_end": 30,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/329",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 328,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "input_processing/input_sanitizer.py",
        "line_start": 165,
        "line_end": 165,
        "column_start": 13,
        "column_end": 39,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/328",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 327,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "input_processing/input_sanitizer.py",
        "line_start": 153,
        "line_end": 153,
        "column_start": 13,
        "column_end": 31,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/327",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 326,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "tools/pseudocode_translator/config_tool.py",
        "line_start": 393,
        "line_end": 393,
        "column_start": 17,
        "column_end": 22,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/326",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 325,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "tools/pseudocode_translator/config_tool.py",
        "line_start": 375,
        "line_end": 375,
        "column_start": 17,
        "column_end": 21,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/325",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 324,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-local-variable",
        "rule_name": "py/unused-local-variable",
        "title": "Unused local variable",
        "state": "open",
        "file_path": "tools/pseudocode_translator/models/codegen.py",
        "line_start": 152,
        "line_end": 152,
        "column_start": 9,
        "column_end": 20,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/324",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused local variable\nA local variable is defined (by an assignment) but never used.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to remove only the left hand side of the assignment in line 10.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\ndef write_random():\n    random_no = write_random_to_file()\n    print "A random number was written to random.txt"\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/2/reference/simple_stmts.html#assignment-statements).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 323,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-global-variable",
        "rule_name": "py/unused-global-variable",
        "title": "Unused global variable",
        "state": "open",
        "file_path": "tools/pseudocode_translator/translator.py",
        "line_start": 146,
        "line_end": 146,
        "column_start": 1,
        "column_end": 19,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/323",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 322,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-global-variable",
        "rule_name": "py/unused-global-variable",
        "title": "Unused global variable",
        "state": "open",
        "file_path": "API_files/services/search.py",
        "line_start": 40,
        "line_end": 40,
        "column_start": 13,
        "column_end": 26,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/322",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 321,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-global-variable",
        "rule_name": "py/unused-global-variable",
        "title": "Unused global variable",
        "state": "open",
        "file_path": "database/initialize_db.py",
        "line_start": 1120,
        "line_end": 1120,
        "column_start": 9,
        "column_end": 19,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/321",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 320,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-global-variable",
        "rule_name": "py/unused-global-variable",
        "title": "Unused global variable",
        "state": "open",
        "file_path": "tools/examples/adaptive_benchmark.py",
        "line_start": 136,
        "line_end": 136,
        "column_start": 5,
        "column_end": 12,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/320",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 319,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "py/unused-global-variable",
        "rule_name": "py/unused-global-variable",
        "title": "Unused global variable",
        "state": "open",
        "file_path": "tools/examples/adaptive_benchmark.py",
        "line_start": 135,
        "line_end": 135,
        "column_start": 5,
        "column_end": 11,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/319",
        "created_at": "2025-09-19T20:20:07Z",
        "updated_at": "2025-09-19T20:20:07Z",
        "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
        "help_text": '# Unused global variable\nA global (module-level) variable is defined (by an assignment) but never used and is not explicitly made public by inclusion in the `__all__` list.\n\nIt is sometimes necessary to have a variable which is not used. These unused variables should have distinctive names, to make it clear to readers of the code that they are deliberately not used. The most common conventions for indicating this are to name the variable `_` or to start the name of the variable with `unused` or `_unused`.\n\nThe query accepts the following names for variables that are intended to be unused:\n\n* Any name consisting entirely of underscores.\n* Any name containing `unused`.\n* The names `dummy` or `empty`.\n* Any "special" name of the form `__xxx__`.\nVariables that are defined in a group, for example `x, y = func()` are handled collectively. If they are all unused, then this is reported. Otherwise they are all treated as used.\n\n\n## Recommendation\nIf the variable is included for documentation purposes or is otherwise intentionally unused, then change its name to indicate that it is unused, otherwise delete the assignment (taking care not to delete right hand side if it has side effects).\n\n\n## Example\nIn this example, the `random_no` variable is never read but its assignment has a side effect. Because of this it is important to only remove the left hand side of the assignment in line 9.\n\n\n```python\nimport random\n\ndef write_random_to_file():\n    no = random.randint(1, 10)\n    with open("random.txt", "w") as file:\n        file.write(str(no))\n    return no\n\nrandom_no = write_random_to_file()\n```\n\n## References\n* Python: [Assignment statements](http://docs.python.org/reference/simple_stmts.html#assignment-statements), [The import statement](http://docs.python.org/reference/simple_stmts.html#the-import-statement).\n* Python Tutorial: [Importing \\* from a package](http://docs.python.org/2/tutorial/modules.html#importing-from-a-package).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n',
    },
    {
        "id": 345,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/syntax-error",
        "rule_name": "js/syntax-error",
        "title": "Syntax error",
        "state": "open",
        "file_path": "src/pages/SettingsPage.tsx",
        "line_start": 111,
        "line_end": 111,
        "column_start": 6,
        "column_end": 7,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/345",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["correctness", "language-features", "quality", "reliability"],
        "help_text": '# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $("box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n',
    },
    {
        "id": 344,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/syntax-error",
        "rule_name": "js/syntax-error",
        "title": "Syntax error",
        "state": "open",
        "file_path": "src/pages/SettingsPage.tsx",
        "line_start": 114,
        "line_end": 114,
        "column_start": 8,
        "column_end": 9,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/344",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["correctness", "language-features", "quality", "reliability"],
        "help_text": '# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $("box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n',
    },
    {
        "id": 343,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/syntax-error",
        "rule_name": "js/syntax-error",
        "title": "Syntax error",
        "state": "open",
        "file_path": "src/pages/ArtifactsPage.tsx",
        "line_start": 42,
        "line_end": 42,
        "column_start": 6,
        "column_end": 7,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/343",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["correctness", "language-features", "quality", "reliability"],
        "help_text": '# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $("box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n',
    },
    {
        "id": 342,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/syntax-error",
        "rule_name": "js/syntax-error",
        "title": "Syntax error",
        "state": "open",
        "file_path": "src/pages/ArtifactsPage.tsx",
        "line_start": 58,
        "line_end": 58,
        "column_start": 8,
        "column_end": 9,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/342",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["correctness", "language-features", "quality", "reliability"],
        "help_text": '# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $("box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n',
    },
    {
        "id": 341,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/syntax-error",
        "rule_name": "js/syntax-error",
        "title": "Syntax error",
        "state": "open",
        "file_path": "src/pages/ArtifactsPage.tsx",
        "line_start": 113,
        "line_end": 113,
        "column_start": 1,
        "column_end": 2,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/341",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["correctness", "language-features", "quality", "reliability"],
        "help_text": '# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $("box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n',
    },
    {
        "id": 340,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/syntax-error",
        "rule_name": "js/syntax-error",
        "title": "Syntax error",
        "state": "open",
        "file_path": "src/pages/ArtifactsPage.tsx",
        "line_start": 111,
        "line_end": 111,
        "column_start": 7,
        "column_end": 8,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/340",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["correctness", "language-features", "quality", "reliability"],
        "help_text": '# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $("box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n',
    },
    {
        "id": 339,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/syntax-error",
        "rule_name": "js/syntax-error",
        "title": "Syntax error",
        "state": "open",
        "file_path": "src/pages/ArtifactsPage.tsx",
        "line_start": 110,
        "line_end": 110,
        "column_start": 9,
        "column_end": 10,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/339",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["correctness", "language-features", "quality", "reliability"],
        "help_text": '# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $("box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n',
    },
    {
        "id": 338,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/unused-local-variable",
        "rule_name": "js/unused-local-variable",
        "title": "Unused variable, import, function or class",
        "state": "open",
        "file_path": "src/pages/FilesPage.tsx",
        "line_start": 51,
        "line_end": 51,
        "column_start": 23,
        "column_end": 37,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/338",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["maintainability", "quality", "useless-code"],
        "help_text": '# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return "Hi!";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return "Hi!";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return "Hi!";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return "Hi!";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n',
    },
    {
        "id": 337,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/unused-local-variable",
        "rule_name": "js/unused-local-variable",
        "title": "Unused variable, import, function or class",
        "state": "open",
        "file_path": "src/pages/FilesPage.tsx",
        "line_start": 50,
        "line_end": 50,
        "column_start": 21,
        "column_end": 33,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/337",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["maintainability", "quality", "useless-code"],
        "help_text": '# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return "Hi!";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return "Hi!";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return "Hi!";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return "Hi!";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n',
    },
    {
        "id": 336,
        "type": "code_scanning",
        "severity": "note",
        "rule_id": "js/unused-local-variable",
        "rule_name": "js/unused-local-variable",
        "title": "Unused variable, import, function or class",
        "state": "open",
        "file_path": "src/pages/FilesPage.tsx",
        "line_start": 48,
        "line_end": 48,
        "column_start": 43,
        "column_end": 55,
        "url": "https://github.com/dinoopitstudios/DinoAir/security/code-scanning/336",
        "created_at": "2025-09-19T20:20:56Z",
        "updated_at": "2025-09-19T20:20:56Z",
        "tags": ["maintainability", "quality", "useless-code"],
        "help_text": '# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return "Hi!";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return "Hi!";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return "Hi!";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return "Hi!";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n',
    },
]
